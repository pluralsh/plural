fragment Account on Account {
  id
  name
  billingCustomerId
  backgroundColor
  userCount
  trialed
}

fragment Group on Group {
  id
  name
  global
  description
}

fragment User on User {
  id
  name
  email
  avatar
  provider
  demoed
  onboarding
  onboardingChecklist {
    dismissed
    status
  }
  emailConfirmed
  emailConfirmBy
  backgroundColor
  serviceAccount
  hasInstallations
  hasShell
  invites {
    id
    email
  }
  roles {
    admin
  }
  groups {
    ...Group
  }
  impersonationPolicy {
    ...ImpersonationPolicy
  }
}

fragment ImpersonationPolicy on ImpersonationPolicy {
  id
  bindings {
    ...ImpersonationPolicyBinding
  }
}

fragment ImpersonationPolicyBinding on ImpersonationPolicyBinding {
  id
  group {
    id
    name
  }
  user {
    id
    name
    email
  }
}

fragment GroupMember on GroupMember {
  id
  user {
    ...User
  }
}

fragment DomainMapping on DomainMapping {
  id
  domain
  enableSso
}

fragment Token on PersistedToken {
  id
  token
  insertedAt
}

fragment TokenAudit on PersistedTokenAudit {
  ip
  timestamp
  count
  country
  city
  latitude
  longitude
}

fragment Address on Address {
  line1
  line2
  city
  country
  state
  zip
}

fragment Publisher on Publisher {
  id
  name
  phone
  avatar
  description
  backgroundColor
  owner {
    ...User
  }
  address {
    ...Address
  }
}

fragment Webhook on Webhook {
  id
  url
  secret
  insertedAt
}

fragment PublicKey on PublicKey {
  id
  name
  digest
  insertedAt
  content
  user {
    ...User
  }
}

fragment EabCredential on EabCredential {
  id
  keyId
  hmacKey
  cluster
  provider
  insertedAt
}

query Me {
  me {
    ...User
    demoing
    loginMethod
    hasInstallations
    hasShell
    intercomId
    account {
      ...Account
      rootUser {
        id
        name
        email
      }
      domainMappings {
        ...DomainMapping
      }
    }
    publisher {
      ...Publisher
      billingAccountId
    }
    boundRoles {
      ...Role
    }
  }
  configuration {
    stripeConnectId
    stripePublishableKey
    registry
    gitCommit
  }
}

query GetLoginMethod($email: String!) {
  loginMethod(email: $email) {
    loginMethod
    token
  }
}

query ListTokens {
  tokens(first: 3) {
    edges {
      node {
        token
      }
    }
  }
}

query ListKeys($emails: [String]) {
  publicKeys(emails: $emails, first: 1000) {
    edges {
      node {
        ...PublicKey
      }
    }
  }
}

query GetEabCredential($cluster: String!, $provider: Provider!) {
  eabCredential(cluster: $cluster, provider: $provider) {
    ...EabCredential
  }
}

mutation DevLogin {
  deviceLogin {
    loginUrl
    deviceToken
  }
}

mutation Login(
  $email: String!
  $password: String!
  $deviceToken: String
  $captcha: String!
) {
  login(
    email: $email
    password: $password
    deviceToken: $deviceToken
    captcha: $captcha
  ) {
    jwt
  }
}

mutation CreateServiceAccount($attributes: ServiceAccountAttributes!) {
  createServiceAccount(attributes: $attributes) {
    ...User
    impersonationPolicy {
      ...ImpersonationPolicy
    }
  }
}

mutation ImpersonateServiceAccount($id: ID, $email: String) {
  impersonateServiceAccount(id: $id, email: $email) {
    jwt
    email
  }
}

mutation CreateAccessToken {
  createToken {
    token
  }
}

mutation CreateKey($key: String!, $name: String!) {
  createPublicKey(attributes: { content: $key, name: $name }) {
    id
  }
}

mutation DeleteEabCredential($cluster: String!, $provider: Provider!) {
  deleteEabKey(cluster: $cluster, provider: $provider) {
    id
  }
}

mutation CreateEvent($attrs: UserEventAttributes!) {
  createUserEvent(attributes: $attrs)
}

query LoginMethod($email: String!, $host: String) {
  loginMethod(email: $email, host: $host) {
    loginMethod
    token
    authorizeUrl
  }
}

mutation Signup(
  $attributes: UserAttributes!
  $account: AccountAttributes
  $deviceToken: String
) {
  signup(
    attributes: $attributes
    account: $account
    deviceToken: $deviceToken
  ) {
    jwt
    onboarding
  }
}

mutation PasswordlessLogin($token: String!) {
  passwordlessLogin(token: $token) {
    jwt
  }
}

mutation PollLoginToken($token: String!, $deviceToken: String) {
  loginToken(token: $token, deviceToken: $deviceToken) {
    jwt
  }
}

query OauthUrls($host: String) {
  oauthUrls(host: $host) {
    provider
    authorizeUrl
  }
}

query LoginMethod($email: String!, $host: String) {
  loginMethod(email: $email, host: $host) {
    loginMethod
    token
    authorizeUrl
  }
}

query OauthUrls($host: String) {
  oauthUrls(host: $host) {
    provider
    authorizeUrl
  }
}

mutation AcceptLogin($challenge: String!) {
  acceptLogin(challenge: $challenge) {
    redirectTo
  }
}

mutation CreateResetToken($attributes: ResetTokenAttributes!) {
  createResetToken(attributes: $attributes)
}

mutation RealizeResetToken($id: ID!, $attributes: ResetTokenRealization!) {
  realizeResetToken(id: $id, attributes: $attributes)
}

query ResetToken($id: ID!) {
  resetToken(id: $id) {
    type
    user {
      ...User
    }
  }
}

query Users(
  $q: String
  $serviceAccount: Boolean
  $all: Boolean
  $cursor: String
  $first: Int = 20
) {
  users(
    q: $q
    first: $first
    after: $cursor
    serviceAccount: $serviceAccount
    all: $all
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...User
        impersonationPolicy {
          ...ImpersonationPolicy
        }
      }
    }
  }
}

mutation ReadNotifications($incidentId: ID) {
  readNotifications(incidentId: $incidentId)
}

mutation DeleteUser($id: ID!) {
  deleteUser(id: $id) {
    ...User
  }
}

mutation UpdateUser($id: ID, $attributes: UserAttributes!) {
  updateUser(id: $id, attributes: $attributes) {
    ...User
  }
}
